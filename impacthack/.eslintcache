[{"/home/khushaal/impact_hack/impacthack/src/index.js":"1","/home/khushaal/impact_hack/impacthack/src/reportWebVitals.js":"2","/home/khushaal/impact_hack/impacthack/src/App.js":"3","/home/khushaal/impact_hack/impacthack/src/Home.js":"4","/home/khushaal/impact_hack/impacthack/src/PastMedications.js":"5","/home/khushaal/impact_hack/impacthack/src/Reminders.js":"6","/home/khushaal/impact_hack/impacthack/src/Signin.js":"7","/home/khushaal/impact_hack/impacthack/src/Register.js":"8","/home/khushaal/impact_hack/impacthack/src/Silly.js":"9","/home/khushaal/impact_hack/impacthack/src/CurrentMedications.js":"10","/home/khushaal/impact_hack/impacthack/src/EditMedication.js":"11"},{"size":478,"mtime":1612118957370,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1611535634450,"results":"14","hashOfConfig":"13"},{"size":1704,"mtime":1612289748071,"results":"15","hashOfConfig":"13"},{"size":217,"mtime":1612118957370,"results":"16","hashOfConfig":"13"},{"size":4244,"mtime":1612244895440,"results":"17","hashOfConfig":"13"},{"size":228,"mtime":1612118957370,"results":"18","hashOfConfig":"13"},{"size":672,"mtime":1612138515710,"results":"19","hashOfConfig":"13"},{"size":1814,"mtime":1612212942650,"results":"20","hashOfConfig":"13"},{"size":4898,"mtime":1612294078347,"results":"21","hashOfConfig":"13"},{"size":7177,"mtime":1612294020147,"results":"22","hashOfConfig":"13"},{"size":4206,"mtime":1612314784650,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"xa3vnl",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/khushaal/impact_hack/impacthack/src/index.js",[],["50","51"],"/home/khushaal/impact_hack/impacthack/src/reportWebVitals.js",[],"/home/khushaal/impact_hack/impacthack/src/App.js",[],"/home/khushaal/impact_hack/impacthack/src/Home.js",[],"/home/khushaal/impact_hack/impacthack/src/PastMedications.js",["52"],"import React, { Component } from \"react\";\nimport axios from 'axios';\n\nclass PastMedications extends Component {\n    state = {\n        data: [],\n        id: 0,\n        name: '',\n        type: '',\n        prescribedMonth: 0,\n        prescribedDay: 0,\n        prescribedYear: 0,\n        instructions: '',\n        userID: null\n\n    };\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    componentDidMount() {\n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    getDataFromDb = () => {\n        fetch('http://localhost:3001/api/getPastMedicationData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n    };\n\n    //Moves data to current medication page and removes it from this page\n    putCurrentDataToDB = (name, type, prescribedMonth, prescribedDay, prescribedYear, instructions) => {\n        let currentIds = this.state.data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post('http://localhost:3001/api/putMedicationData', {\n            id: idToBeAdded,\n            name: name,\n            type: type,\n            prescribedMonth: prescribedMonth,\n            prescribedDay: prescribedDay, \n            prescribedYear: prescribedYear, \n            instructions: instructions\n\n        });\n    };\n\n\n    deleteFromDB = (idTodelete) => {\n        let objIdToDelete = null;\n        this.state.data.forEach((dat) => {\n            if (dat._id == idTodelete) {\n                objIdToDelete = dat._id;\n            }\n        });\n\n        axios.delete('http://localhost:3001/api/deletePastMedicationData', {\n            data: {\n                id: objIdToDelete,\n            },\n        });\n    };\n\n    render() {\n        const { data } = this.state;\n        return (\n            \n            <div>\n                <h2>Past medications</h2>\n                <ul>\n                    {data.length <= 0 ? 'NO DB ENTRIES YET': data.map((dat) => (\n                            <li style={{ padding: '10px' }} key={data._id}>\n                                <span style={{ color: 'gray' }}> id: </span> {dat._id} <br />\n                                <span style={{ color: 'gray' }}> Medication: </span> {dat.name} <br />\n                                <span style={{ color: 'gray' }}> Type: </span> {dat.type} <br />\n                                <span style={{ color: 'gray' }}> Prescribed Date: </span> {dat.prescribedMonth}/{dat.prescribedDay}/{dat.prescribedYear} <br />\n                                <span style={{ color: 'gray' }}> Instructions: </span> {dat.instructions} <br />\n                                <button onClick={() => console.log(\"Edit Not Implemented Yet\")}>\n                                    EDIT - Not Implemented Yet :(\n                                </button> <br />\n                                <button onClick={() => this.deleteFromDB(dat._id)}>\n                                    DELETE\n                                </button> <br />\n                                <button onClick={() => {\n                                    this.putCurrentDataToDB(dat.name, dat.type, dat.prescribedMonth, dat.prescribedDay, dat.prescribedYear, dat.instructions);\n                                    this.deleteFromDB(dat._id);\n                                    }}>\n                                    RETURN TO CURRENT MEDICATION\n                                </button> <br />\n                            </li>\n                        ))}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default PastMedications;","/home/khushaal/impact_hack/impacthack/src/Reminders.js",[],"/home/khushaal/impact_hack/impacthack/src/Signin.js",[],"/home/khushaal/impact_hack/impacthack/src/Register.js",[],"/home/khushaal/impact_hack/impacthack/src/Silly.js",["53","54"],"// /client/App.js\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Silly extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch('http://localhost:3001/api/getData')\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  putDataToDB = (message) => {\n    let currentIds = this.state.data.map((data) => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post('http://localhost:3001/api/putData', {\n      id: idToBeAdded,\n      message: message,\n    });\n  };\n\n  // our delete method that uses our backend api\n  // to remove existing database information\n  deleteFromDB = (idTodelete) => {\n    parseInt(idTodelete);\n    let objIdToDelete = null;\n    this.state.data.forEach((dat) => {\n      if (dat.id == idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete('http://localhost:3001/api/deleteData', {\n      data: {\n        id: objIdToDelete,\n      },\n    });\n  };\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    parseInt(idToUpdate);\n    this.state.data.forEach((dat) => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post('http://localhost:3001/api/updateData', {\n      id: objIdToUpdate,\n      update: { message: updateToApply },\n    });\n  };\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat) => (\n                <li style={{ padding: '10px' }} key={data.message}>\n                  <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                  <span style={{ color: 'gray' }}> data: </span>\n                  {dat.message}\n                </li>\n              ))}\n        </ul>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ message: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Silly;","/home/khushaal/impact_hack/impacthack/src/CurrentMedications.js",["55","56","57","58","59"],"import React, { Component } from \"react\";\nimport axios from 'axios';\n\nimport { Route, NavLink, HashRouter, Switch } from 'react-router-dom';\nimport EditMedication from './EditMedication';\n\nclass CurrentMedications extends Component {\n    state = {\n        data: [],\n        id: 0,\n        name: '',\n        type: '',\n        prescribedMonth: 0,\n        prescribedDay: 0,\n        prescribedYear: 0,\n        instructions: '',\n        userID: null\n\n    };\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    componentDidMount() {\n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    getDataFromDb = () => {\n        fetch('http://localhost:3001/api/getMedicationData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n    };\n\n    putDataToDB = (name, type, prescribedMonth, prescribedDay, prescribedYear, instructions) => {\n        let currentIds = this.state.data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post('http://localhost:3001/api/putMedicationData', {\n            id: idToBeAdded,\n            name: name,\n            type: type,\n            prescribedMonth: prescribedMonth,\n            prescribedDay: prescribedDay,\n            prescribedYear: prescribedYear,\n            instructions: instructions\n\n        });\n    };\n\n    //Moves data to past medication page and removes it from this page\n    putPastDataToDB = (name, type, prescribedMonth, prescribedDay, prescribedYear, instructions) => {\n        let currentIds = this.state.data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post('http://localhost:3001/api/putPastMedicationData', {\n            id: idToBeAdded,\n            name: name,\n            type: type,\n            prescribedMonth: prescribedMonth,\n            prescribedDay: prescribedDay,\n            prescribedYear: prescribedYear,\n            instructions: instructions\n\n        });\n    };\n\n    // our delete method that uses our backend api\n    // to remove existing database information\n    deleteFromDB = (idTodelete) => {\n        let objIdToDelete = null;\n        this.state.data.forEach((dat) => {\n            if (dat._id == idTodelete) {\n                objIdToDelete = dat._id;\n            }\n        });\n\n        axios.delete('http://localhost:3001/api/deleteMedicationData', {\n            data: {\n                id: objIdToDelete,\n            },\n        });\n    };\n\n\n\n    render() {\n        const { data } = this.state;\n\n        return (\n            <div>\n                <h2>Current Medications</h2>\n                <form>\n                    <input\n                        type=\"text\"\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        id=\"name\"\n                    />\n                    <input\n                        type=\"text\"\n                        name=\"type\"\n                        placeholder=\"Type of Medication\"\n                        id=\"type\"\n                    />\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"12\"\n                        name=\"prescribedMonth\"\n                        placeholder=\"Month\"\n                        id=\"prescribedMonth\"\n                    />\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"31\"\n                        name=\"prescribedDay\"\n                        placeholder=\"Day\"\n                        id=\"prescribedDay\"\n                    />\n                    <input\n                        type=\"number\"\n                        min=\"1900\"\n                        max=\"2050\"\n                        name=\"prescribedYear\"\n                        placeholder=\"Year\"\n                        id=\"prescribedYear\"\n                    />\n                    <input\n                        type=\"text\"\n                        name=\"instructions\"\n                        placeholder=\"Instructions for Medication\"\n                        id=\"instructions\"\n                    />\n                    <button\n                        type=\"submit\"\n                        onClick={() => this.putDataToDB(\n                            document.getElementById('name').value,\n                            document.getElementById('type').value,\n                            document.getElementById('prescribedMonth').value,\n                            document.getElementById('prescribedDay').value,\n                            document.getElementById('prescribedYear').value,\n                            document.getElementById('instructions').value)}\n                    >\n                        Add New Medication\n                    </button>\n                </form>\n                <ul>\n                    {data.length <= 0 ? 'NO DB ENTRIES YET' : data.map((dat) => (\n                        <li style={{ padding: '10px' }} key={data._id}>\n                            <span style={{ color: 'gray' }}> id: </span> {dat._id} <br />\n                            <span style={{ color: 'gray' }}> Medication: </span> {dat.name} <br />\n                            <span style={{ color: 'gray' }}> Type: </span> {dat.type} <br />\n                            <span style={{ color: 'gray' }}> Prescribed Date: </span> {dat.prescribedMonth}/{dat.prescribedDay}/{dat.prescribedYear} <br />\n                            <span style={{ color: 'gray' }}> Instructions: </span> {dat.instructions} <br />\n\n                            <NavLink to={\"/editmedication/\" + dat._id} >\n                                <button>EDIT</button> <br />\n                            </NavLink>\n\n                            <button onClick={() => this.deleteFromDB(dat._id)}>\n                                DELETE\n                                </button> <br />\n\n                            <button onClick={() => {\n                                this.putPastDataToDB(dat.name, dat.type, dat.prescribedMonth, dat.prescribedDay, dat.prescribedYear, dat.instructions);\n                                this.deleteFromDB(dat._id);\n                            }}>\n                                MOVE TO PAST MEDICATION\n                                </button> <br />\n                        </li>\n                    ))}\n                </ul>\n            </div>\n\n        );\n    }\n}\n\nexport default CurrentMedications;","/home/khushaal/impact_hack/impacthack/src/EditMedication.js",["60","61"],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":68,"column":25,"nodeType":"68","messageId":"69","endLine":68,"endColumn":27},{"ruleId":"66","severity":1,"message":"67","line":71,"column":18,"nodeType":"68","messageId":"69","endLine":71,"endColumn":20},{"ruleId":"66","severity":1,"message":"67","line":89,"column":18,"nodeType":"68","messageId":"69","endLine":89,"endColumn":20},{"ruleId":"70","severity":1,"message":"71","line":4,"column":10,"nodeType":"72","messageId":"73","endLine":4,"endColumn":15},{"ruleId":"70","severity":1,"message":"74","line":4,"column":26,"nodeType":"72","messageId":"73","endLine":4,"endColumn":36},{"ruleId":"70","severity":1,"message":"75","line":4,"column":38,"nodeType":"72","messageId":"73","endLine":4,"endColumn":44},{"ruleId":"70","severity":1,"message":"76","line":5,"column":8,"nodeType":"72","messageId":"73","endLine":5,"endColumn":22},{"ruleId":"66","severity":1,"message":"67","line":90,"column":25,"nodeType":"68","messageId":"69","endLine":90,"endColumn":27},{"ruleId":"70","severity":1,"message":"77","line":1,"column":17,"nodeType":"72","messageId":"73","endLine":1,"endColumn":26},{"ruleId":"70","severity":1,"message":"78","line":63,"column":13,"nodeType":"72","messageId":"73","endLine":63,"endColumn":17},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'HashRouter' is defined but never used.","'Switch' is defined but never used.","'EditMedication' is defined but never used.","'Component' is defined but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]