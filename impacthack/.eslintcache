[{"/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/index.js":"1","/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/reportWebVitals.js":"2","/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/App.js":"3","/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/Silly.js":"4","/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/PastMedications.js":"5","/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/Home.js":"6","/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/Reminders.js":"7","/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/Signin.js":"8","/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/Register.js":"9","/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/EditMedication.js":"10","/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/CurrentMedications.js":"11"},{"size":478,"mtime":1612569764852,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1612569764852,"results":"14","hashOfConfig":"13"},{"size":1690,"mtime":1612656701767,"results":"15","hashOfConfig":"13"},{"size":4898,"mtime":1612569764852,"results":"16","hashOfConfig":"13"},{"size":5455,"mtime":1612570454025,"results":"17","hashOfConfig":"13"},{"size":1506,"mtime":1612662721703,"results":"18","hashOfConfig":"13"},{"size":1524,"mtime":1612570454026,"results":"19","hashOfConfig":"13"},{"size":2861,"mtime":1612662355444,"results":"20","hashOfConfig":"13"},{"size":3627,"mtime":1612661643824,"results":"21","hashOfConfig":"13"},{"size":3411,"mtime":1612570454024,"results":"22","hashOfConfig":"13"},{"size":8515,"mtime":1612570454024,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"m7nm1g",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"26"},"/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/index.js",[],["53","54"],"/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/reportWebVitals.js",[],"/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/App.js",[],"/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/Silly.js",["55","56"],"// /client/App.js\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Silly extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch('http://localhost:3001/api/getData')\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  putDataToDB = (message) => {\n    let currentIds = this.state.data.map((data) => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post('http://localhost:3001/api/putData', {\n      id: idToBeAdded,\n      message: message,\n    });\n  };\n\n  // our delete method that uses our backend api\n  // to remove existing database information\n  deleteFromDB = (idTodelete) => {\n    parseInt(idTodelete);\n    let objIdToDelete = null;\n    this.state.data.forEach((dat) => {\n      if (dat.id == idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete('http://localhost:3001/api/deleteData', {\n      data: {\n        id: objIdToDelete,\n      },\n    });\n  };\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    parseInt(idToUpdate);\n    this.state.data.forEach((dat) => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post('http://localhost:3001/api/updateData', {\n      id: objIdToUpdate,\n      update: { message: updateToApply },\n    });\n  };\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat) => (\n                <li style={{ padding: '10px' }} key={data.message}>\n                  <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                  <span style={{ color: 'gray' }}> data: </span>\n                  {dat.message}\n                </li>\n              ))}\n        </ul>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ message: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Silly;","/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/PastMedications.js",["57"],"import React, { Component } from \"react\";\nimport axios from 'axios';\nimport { NavLink } from 'react-router-dom';\n\nasync function genMess() {\n    sessionStorage.setItem(\"message\", \"Successfully signed out\");\n}\nclass PastMedications extends Component {\n    state = {\n        data: [],\n        id: 0,\n        name: '',\n        type: '',\n        prescribedMonth: 0,\n        prescribedDay: 0,\n        prescribedYear: 0,\n        instructions: '',\n        userID: null\n\n    };\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    componentDidMount() {\n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    getDataFromDb = () => {\n        fetch('http://localhost:3001/api/getPastMedicationData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n    };\n\n    //Moves data to current medication page and removes it from this page\n    putCurrentDataToDB = (name, type, prescribedMonth, prescribedDay, prescribedYear, instructions) => {\n        let currentIds = this.state.data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post('http://localhost:3001/api/putMedicationData', {\n            id: idToBeAdded,\n            name: name,\n            type: type,\n            prescribedMonth: prescribedMonth,\n            prescribedDay: prescribedDay,\n            prescribedYear: prescribedYear,\n            instructions: instructions\n\n        });\n    };\n\n\n    deleteFromDB = (idTodelete) => {\n        let objIdToDelete = null;\n        this.state.data.forEach((dat) => {\n            if (dat._id == idTodelete) {\n                objIdToDelete = dat._id;\n            }\n        });\n\n        axios.delete('http://localhost:3001/api/deletePastMedicationData', {\n            data: {\n                id: objIdToDelete,\n            },\n        });\n    };\n\n    render() {\n        const { data } = this.state;\n        return (\n\n            <div>\n                <h2>Past medications</h2>\n                <ul>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/home\"}>Home</NavLink></li>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/currentmedications\"}>Current Medications</NavLink></li>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/pastmedications\"}>Past Medications</NavLink></li>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/reminders\"}>Reminders</NavLink></li>\n                    <li><NavLink to=\"/silly\">Silly</NavLink></li>\n                    <li><NavLink to=\"/\" onClick={genMess}>Sign Out</NavLink></li>\n                </ul>\n                <ul>\n                    {data.length <= 0 ? 'NO DB ENTRIES YET' : data.map((dat) => (\n                        <li style={{ padding: '10px' }} key={data._id}>\n                            <span style={{ color: 'gray' }}> id: </span> {dat._id} <br />\n                            <span style={{ color: 'gray' }}> Medication: </span> {dat.name} <br />\n                            <span style={{ color: 'gray' }}> Type: </span> {dat.type} <br />\n                            <span style={{ color: 'gray' }}> Prescribed Date: </span> {dat.prescribedMonth}/{dat.prescribedDay}/{dat.prescribedYear} <br />\n                            <span style={{ color: 'gray' }}> Instructions: </span> {dat.instructions} <br />\n                            <button onClick={() => console.log(\"Edit Not Implemented Yet\")}>\n                                EDIT - Not Implemented Yet :(\n                                </button> <br />\n                            <button onClick={() => this.deleteFromDB(dat._id)}>\n                                DELETE\n                                </button> <br />\n                            <button onClick={() => {\n                                this.putCurrentDataToDB(dat.name, dat.type, dat.prescribedMonth, dat.prescribedDay, dat.prescribedYear, dat.instructions);\n                                this.deleteFromDB(dat._id);\n                            }}>\n                                RETURN TO CURRENT MEDICATION\n                                </button> <br />\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default PastMedications;","/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/Home.js",[],"/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/Reminders.js",[],["58","59"],"/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/Signin.js",["60"],"import React, { Component } from \"react\";\nimport { NavLink, Redirect } from 'react-router-dom';\n\nvar signedIn = false;\n\nclass Signin extends Component {\n    state = {\n        data: [],\n        email: '',\n        password: '',\n        redirect: null\n    }\n\n    componentDidMount() {\n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    getDataFromDb = () => {\n        fetch('http://localhost:3001/api/getUserData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n    };\n\n    clickSignin = (email, password) => {\n        signedIn = false;\n        const allData = this.state.data;\n        for (let i = 0; i < allData.length; i++) {\n            if (allData[i].email === email && allData[i].password === password) {\n                signedIn = true;\n                this.setState({ redirect: allData[i]._id + \"/home\" });\n                console.log(\"Signed in!\");\n                sessionStorage.clear();\n            }\n        }\n        if (!signedIn) {\n            sessionStorage.clear();\n            sessionStorage.setItem(\"message\", \"Incorrect email or password\");\n        }\n    };\n\n    render() {\n        const { data } = this.state;\n        if (this.state.redirect) {\n            return <Redirect to={this.state.redirect} />\n        }\n        return (\n            <div>\n                <ul>\n                    <li><NavLink class = \"active\" to=\"/\">SIGN IN</NavLink></li>\n                    <li><NavLink to=\"/register\">REGISTER</NavLink></li>\n                </ul>\n                <h2>SIGN IN</h2>\n                <div className = \"form\">\n                <p id=\"message\">{sessionStorage.getItem(\"message\")}</p>\n                <fieldset>\n                <form>\n                    <input\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"Email\"\n                        id=\"email\"\n                    />\n                    <input\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Password\"\n                        id=\"password\"\n                    />\n                </form>\n                <button\n                    onClick={() => this.clickSignin(document.getElementById(\"email\").value, document.getElementById(\"password\").value)}\n                >\n                    Sign In\n                    </button>\n                </fieldset>\n                </div>\n\n\n\n\n            </div>\n        );\n    }\n}\n\nexport default Signin;","/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/Register.js",[],"/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/EditMedication.js",["61","62"],"import React, { Component } from \"react\";\nimport axios from 'axios';\nimport { useParams, NavLink } from 'react-router-dom';\n\nconst EditMedication = () => {\n    let state = {\n        data: [],\n        id: 0,\n        name: '',\n        type: '',\n        prescribedMonth: 0,\n        prescribedDay: 0,\n        prescribedYear: 0,\n        instructions: '',\n        userID: null\n\n    };\n\n    function updateDB(idToUpdate, updatedName, updatedType, updatedMonth, updatedDay, updatedYear, updatedInstructions) {\n        axios.post('http://localhost:3001/api/updateMedicationData', {\n            id: idToUpdate,\n            update: {\n                name: updatedName,\n                type: updatedType,\n                prescribedMonth: updatedMonth,\n                prescribedDay: updatedDay,\n                prescribedYear: updatedYear,\n                instructions: updatedInstructions\n\n            },\n        });\n    };\n\n    let { medicationId } = useParams();\n\n    const { data } = state;\n    return (\n        <div>\n            <h2>Edit Medication</h2>\n            <form>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder=\"Name\"\n                    id=\"name\"\n                />\n                <input\n                    type=\"text\"\n                    name=\"type\"\n                    placeholder=\"Type of Medication\"\n                    id=\"type\"\n                />\n                <input\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"12\"\n                    name=\"prescribedMonth\"\n                    placeholder=\"Month\"\n                    id=\"prescribedMonth\"\n                />\n                <input\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"31\"\n                    name=\"prescribedDay\"\n                    placeholder=\"Day\"\n                    id=\"prescribedDay\"\n                />\n                <input\n                    type=\"number\"\n                    min=\"1900\"\n                    max=\"2050\"\n                    name=\"prescribedYear\"\n                    placeholder=\"Year\"\n                    id=\"prescribedYear\"\n                />\n                <input\n                    type=\"text\"\n                    name=\"instructions\"\n                    placeholder=\"Instructions for Medication\"\n                    id=\"instructions\"\n                />\n                <NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/currentmedications\"}>\n                    <button\n                        type=\"submit\"\n                        onClick={() => updateDB(medicationId,\n                            document.getElementById('name').value,\n                            document.getElementById('type').value,\n                            document.getElementById('prescribedMonth').value,\n                            document.getElementById('prescribedDay').value,\n                            document.getElementById('prescribedYear').value,\n                            document.getElementById('instructions').value)\n\n                        }\n                    >\n                        Save Changes\n                    </button>\n                </NavLink>\n            </form>\n        </div>\n    );\n\n}\n\nexport default EditMedication;","/Users/kritividya/Documents/hackathon/impact_hack/impacthack/src/CurrentMedications.js",["63"],"import React, { Component } from \"react\";\nimport axios from 'axios';\n\nimport { NavLink } from 'react-router-dom';\n\nasync function genMess() {\n    sessionStorage.setItem(\"message\", \"Successfully signed out\");\n}\nclass CurrentMedications extends Component {\n    state = {\n        data: [],\n        id: 0,\n        name: '',\n        type: '',\n        prescribedMonth: 0,\n        prescribedDay: 0,\n        prescribedYear: 0,\n        instructions: '',\n        userID: null\n\n    };\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    componentDidMount() {\n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    getDataFromDb = () => {\n        fetch('http://localhost:3001/api/getMedicationData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n    };\n\n    putDataToDB = (name, type, prescribedMonth, prescribedDay, prescribedYear, instructions) => {\n        let currentIds = this.state.data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post('http://localhost:3001/api/putMedicationData', {\n            id: idToBeAdded,\n            name: name,\n            type: type,\n            prescribedMonth: prescribedMonth,\n            prescribedDay: prescribedDay,\n            prescribedYear: prescribedYear,\n            instructions: instructions\n\n        });\n    };\n\n    //Moves data to past medication page and removes it from this page\n    putPastDataToDB = (name, type, prescribedMonth, prescribedDay, prescribedYear, instructions) => {\n        let currentIds = this.state.data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post('http://localhost:3001/api/putPastMedicationData', {\n            id: idToBeAdded,\n            name: name,\n            type: type,\n            prescribedMonth: prescribedMonth,\n            prescribedDay: prescribedDay,\n            prescribedYear: prescribedYear,\n            instructions: instructions\n\n        });\n    };\n\n    // our delete method that uses our backend api\n    // to remove existing database information\n    deleteFromDB = (idTodelete) => {\n        let objIdToDelete = null;\n        this.state.data.forEach((dat) => {\n            if (dat._id == idTodelete) {\n                objIdToDelete = dat._id;\n            }\n        });\n\n        axios.delete('http://localhost:3001/api/deleteMedicationData', {\n            data: {\n                id: objIdToDelete,\n            },\n        });\n    };\n\n\n\n    render() {\n        const { data } = this.state;\n\n        return (\n            <div>\n                <h2>Current Medications</h2>\n                <ul>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/home\"}>Home</NavLink></li>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/currentmedications\"}>Current Medications</NavLink></li>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/pastmedications\"}>Past Medications</NavLink></li>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/reminders\"}>Reminders</NavLink></li>\n                    <li><NavLink to=\"/silly\">Silly</NavLink></li>\n                    <li><NavLink to=\"/\" onClick={genMess}>Sign Out</NavLink></li>\n                </ul>\n                <form>\n                    <input\n                        type=\"text\"\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        id=\"name\"\n                    />\n                    <input\n                        type=\"text\"\n                        name=\"type\"\n                        placeholder=\"Type of Medication\"\n                        id=\"type\"\n                    />\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"12\"\n                        name=\"prescribedMonth\"\n                        placeholder=\"Month\"\n                        id=\"prescribedMonth\"\n                    />\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"31\"\n                        name=\"prescribedDay\"\n                        placeholder=\"Day\"\n                        id=\"prescribedDay\"\n                    />\n                    <input\n                        type=\"number\"\n                        min=\"1900\"\n                        max=\"2050\"\n                        name=\"prescribedYear\"\n                        placeholder=\"Year\"\n                        id=\"prescribedYear\"\n                    />\n                    <input\n                        type=\"text\"\n                        name=\"instructions\"\n                        placeholder=\"Instructions for Medication\"\n                        id=\"instructions\"\n                    />\n                    <button\n                        type=\"submit\"\n                        onClick={() => this.putDataToDB(\n                            document.getElementById('name').value,\n                            document.getElementById('type').value,\n                            document.getElementById('prescribedMonth').value,\n                            document.getElementById('prescribedDay').value,\n                            document.getElementById('prescribedYear').value,\n                            document.getElementById('instructions').value)}\n                    >\n                        Add New Medication\n                    </button>\n                </form>\n                <ul>\n                    {data.length <= 0 ? 'NO DB ENTRIES YET' : data.map((dat) => (\n                        <li style={{ padding: '10px' }} key={data._id}>\n                            <span style={{ color: 'gray' }}> id: </span> {dat._id} <br />\n                            <span style={{ color: 'gray' }}> Medication: </span> {dat.name} <br />\n                            <span style={{ color: 'gray' }}> Type: </span> {dat.type} <br />\n                            <span style={{ color: 'gray' }}> Prescribed Date: </span> {dat.prescribedMonth}/{dat.prescribedDay}/{dat.prescribedYear} <br />\n                            <span style={{ color: 'gray' }}> Instructions: </span> {dat.instructions} <br />\n\n                            <NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/editmedication/\" + dat._id} >\n                                <button>EDIT</button> <br />\n                            </NavLink>\n\n                            <button onClick={() => this.deleteFromDB(dat._id)}>\n                                DELETE\n                                </button> <br />\n\n                            <button onClick={() => {\n                                this.putPastDataToDB(dat.name, dat.type, dat.prescribedMonth, dat.prescribedDay, dat.prescribedYear, dat.instructions);\n                                this.deleteFromDB(dat._id);\n                            }}>\n                                MOVE TO PAST MEDICATION\n                                </button> <br />\n                        </li>\n                    ))}\n                </ul>\n            </div>\n\n        );\n    }\n}\n\nexport default CurrentMedications;",{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":71,"column":18,"nodeType":"70","messageId":"71","endLine":71,"endColumn":20},{"ruleId":"68","severity":1,"message":"69","line":89,"column":18,"nodeType":"70","messageId":"71","endLine":89,"endColumn":20},{"ruleId":"68","severity":1,"message":"69","line":72,"column":25,"nodeType":"70","messageId":"71","endLine":72,"endColumn":27},{"ruleId":"64","replacedBy":"72"},{"ruleId":"66","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":53,"column":17,"nodeType":"76","messageId":"77","endLine":53,"endColumn":21},{"ruleId":"74","severity":1,"message":"78","line":1,"column":17,"nodeType":"76","messageId":"77","endLine":1,"endColumn":26},{"ruleId":"74","severity":1,"message":"75","line":36,"column":13,"nodeType":"76","messageId":"77","endLine":36,"endColumn":17},{"ruleId":"68","severity":1,"message":"69","line":92,"column":25,"nodeType":"70","messageId":"71","endLine":92,"endColumn":27},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["79"],["80"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'Component' is defined but never used.","no-global-assign","no-unsafe-negation"]
