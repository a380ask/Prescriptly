[{"/home/khushaal/impact_hack/impacthack/src/index.js":"1","/home/khushaal/impact_hack/impacthack/src/reportWebVitals.js":"2","/home/khushaal/impact_hack/impacthack/src/App.js":"3","/home/khushaal/impact_hack/impacthack/src/Home.js":"4","/home/khushaal/impact_hack/impacthack/src/PastMedications.js":"5","/home/khushaal/impact_hack/impacthack/src/Reminders.js":"6","/home/khushaal/impact_hack/impacthack/src/Signin.js":"7","/home/khushaal/impact_hack/impacthack/src/Register.js":"8","/home/khushaal/impact_hack/impacthack/src/Silly.js":"9","/home/khushaal/impact_hack/impacthack/src/CurrentMedications.js":"10","/home/khushaal/impact_hack/impacthack/src/EditMedication.js":"11"},{"size":478,"mtime":1612118957370,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1611535634450,"results":"14","hashOfConfig":"13"},{"size":1737,"mtime":1612665003240,"results":"15","hashOfConfig":"13"},{"size":1518,"mtime":1612568252710,"results":"16","hashOfConfig":"13"},{"size":6452,"mtime":1612664970440,"results":"17","hashOfConfig":"13"},{"size":4904,"mtime":1612665580930,"results":"18","hashOfConfig":"13"},{"size":2726,"mtime":1612665003240,"results":"19","hashOfConfig":"13"},{"size":3552,"mtime":1612568252710,"results":"20","hashOfConfig":"13"},{"size":4898,"mtime":1612294078347,"results":"21","hashOfConfig":"13"},{"size":9509,"mtime":1612664970440,"results":"22","hashOfConfig":"13"},{"size":6737,"mtime":1612664970440,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"xa3vnl",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},"/home/khushaal/impact_hack/impacthack/src/index.js",[],["54","55"],"/home/khushaal/impact_hack/impacthack/src/reportWebVitals.js",[],"/home/khushaal/impact_hack/impacthack/src/App.js",[],"/home/khushaal/impact_hack/impacthack/src/Home.js",[],"/home/khushaal/impact_hack/impacthack/src/PastMedications.js",["56","57","58","59"],"import React, { Component } from \"react\";\nimport axios from 'axios';\nimport { NavLink } from 'react-router-dom';\n\nasync function genMess() {\n    sessionStorage.setItem(\"message\", \"Successfully signed out\");\n}\n\n\nlet filtered = [];\nlet userIdString = '';\n\nclass PastMedications extends Component {\n    state = {\n        data: [],\n        id: 0,\n        name: '',\n        type: '',\n        prescribedMonth: 0,\n        prescribedDay: 0,\n        prescribedYear: 0,\n        instructions: '',\n        userID: ''\n\n    };\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    componentDidMount() {\n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    getDataFromDb = () => {\n        fetch('http://localhost:3001/api/getPastMedicationData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n    };\n\n    //Moves data to current medication page and removes it from this page\n    putCurrentDataToDB = (name, type, prescribedMonth, prescribedDay, prescribedYear, instructions) => {\n        let currentIds = this.state.data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post('http://localhost:3001/api/putMedicationData', {\n            id: idToBeAdded,\n            name: name,\n            type: type,\n            prescribedMonth: prescribedMonth,\n            prescribedDay: prescribedDay,\n            prescribedYear: prescribedYear,\n            instructions: instructions,\n            userID: userIdString\n\n        });\n    };\n\n\n    deleteFromDB = (idTodelete, deleteOrMove) => {\n        let message = '';\n        if(deleteOrMove == 'delete'){\n            message = \"Are you sure you want to delete this medication?\";\n        } else if (deleteOrMove == 'move'){\n            message = \"Are you sure you want to move this medication to past medication?\";\n        }\n        if(window.confirm(message)){\n            let objIdToDelete = null;\n            this.state.data.forEach((dat) => {\n                if (dat._id == idTodelete) {\n                    objIdToDelete = dat._id;\n                }\n            });\n\n            axios.delete('http://localhost:3001/api/deletePastMedicationData', {\n                data: {\n                    id: objIdToDelete,\n                },\n            });\n        }\n        window.location.reload();\n    };\n\n    filterData = () => {\n        for(let i = 0; i < this.state.data.length; i++){\n            if(this.state.data[i].userID === userIdString && this.isIncluded(this.state.data[i])){\n                filtered.push(this.state.data[i]);\n            }\n        }\n    }\n\n    isIncluded = (object) => {\n        for(let i = 0; i < filtered.length; i++){\n            if(filtered[i]._id === object._id){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    render() {\n        const { data } = this.state;\n        userIdString = window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1));\n        this.filterData();\n        return (\n\n            <div>\n                <h2>Past medications</h2>\n                <ul>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/home\"}>Home</NavLink></li>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/currentmedications\"}>Current Medications</NavLink></li>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/pastmedications\"}>Past Medications</NavLink></li>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/reminders\"}>Reminders</NavLink></li>\n                    <li><NavLink to=\"/silly\">Silly</NavLink></li>\n                    <li><NavLink to=\"/\" onClick={genMess}>Sign Out</NavLink></li>\n                </ul>\n                <ul>\n                    {filtered.length <= 0 ? 'NO DB ENTRIES YET' : filtered.map((dat) => (\n                        <li style={{ padding: '10px' }} key={dat._id}>\n                            <span style={{ color: 'gray' }}> id: </span> {dat._id} <br />\n                            <span style={{ color: 'gray' }}> Medication: </span> {dat.name} <br />\n                            <span style={{ color: 'gray' }}> Type: </span> {dat.type} <br />\n                            <span style={{ color: 'gray' }}> Prescribed Date: </span> {dat.prescribedMonth}/{dat.prescribedDay}/{dat.prescribedYear} <br />\n                            <span style={{ color: 'gray' }}> Instructions: </span> {dat.instructions} <br />\n                            <button onClick={() => this.deleteFromDB(dat._id, 'delete')}>\n                                DELETE\n                                </button> <br />\n                            <button onClick={() => {\n                                this.putCurrentDataToDB(dat.name, dat.type, dat.prescribedMonth, dat.prescribedDay, dat.prescribedYear, dat.instructions);\n                                this.deleteFromDB(dat._id, 'move');\n                            }}>\n                                RETURN TO CURRENT MEDICATION\n                                </button> <br />\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default PastMedications;","/home/khushaal/impact_hack/impacthack/src/Reminders.js",["60","61"],"import React, { Component } from \"react\";\nimport { NavLink } from 'react-router-dom';\nimport axios from 'axios';\n\nasync function genMess() {\n    sessionStorage.setItem(\"message\", \"Successfully signed out\");\n}\n\nlet filtered = [];\nlet userIdString = '';\n\nclass Reminders extends Component {\n    state = {\n        data: [],\n        medid: '',\n        userid: '',\n        hours: '',\n        min: ''\n    }\n\n    componentDidMount() {\n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    getDataFromDb = () => {\n        fetch('http://localhost:3001/api/getMedicationData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n    };\n\n    createReminder = (med, time, email) => {\n        axios.post('http://localhost:3001/api/postReminders', {\n            medname: med,\n            userid: window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)),\n            useremail: email,\n            hours: time[0] + time[1],\n            min: time[3] + time[4]\n        });\n        sessionStorage.clear();\n        sessionStorage.setItem(\"message\", \"Your reminder for \" + med + \" has been set for \" + time + \" daily\");\n        document.getElementById(\"meds\").value = 'initial';\n        document.getElementById(\"remindTime\").value = '';\n        document.getElementById(\"email\").value = '';\n    }\n\n    filterData = () => {\n        for(let i = 0; i < this.state.data.length; i++){\n            if(this.state.data[i].userID == userIdString && this.isIncluded(this.state.data[i])){\n                filtered.push(this.state.data[i]);\n            }\n        }\n    };\n    \n    isIncluded = (object) => {\n        for(let i = 0; i < filtered.length; i++){\n            if(filtered[i]._id === object._id){\n                return false;\n            }\n        }\n        return true;\n    };\n\n    render() {\n        const { data } = this.state;\n        userIdString = window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1));\n        this.filterData();\n\n        return (\n            <div>\n                <h2>Reminders</h2>\n                <ul>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/home\"}>Home</NavLink></li>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/currentmedications\"}>Current Medications</NavLink></li>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/pastmedications\"}>Past Medications</NavLink></li>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/reminders\"}>Reminders</NavLink></li>\n                    <li><NavLink to=\"/silly\">Silly</NavLink></li>\n                    <li><NavLink to=\"/\" onClick={genMess}>Sign Out</NavLink></li>\n                </ul>\n                <p id=\"message\">{sessionStorage.getItem(\"message\")}</p>\n                <form>\n                    <select id=\"meds\">\n                        <option disabled selected value=\"initial\">---Select a medication---</option>\n                        {filtered.length <= 0 ? 'No medications; please add' : filtered.map((dat) => (\n                            <option value={dat.name} key={dat._id}>{dat.name}</option>\n                        ))}\n                    </select>\n                    <label htmlfor=\"remindTime\">Reminder daily at: </label>\n                    <input\n                        type=\"time\"\n                        id=\"remindTime\"\n                    />\n                    <input\n                        type=\"email\"\n                        id=\"email\"\n                        placeholder=\"Email\"\n                    />\n                </form>\n                <button onClick={() => this.createReminder(document.getElementById(\"meds\").value, document.getElementById(\"remindTime\").value,\n                    document.getElementById('email').value)}>Create Reminder</button>\n            </div>\n        );\n    }\n}\n\nexport default Reminders;","/home/khushaal/impact_hack/impacthack/src/Signin.js",["62"],"import React, { Component } from \"react\";\nimport { NavLink, Redirect } from 'react-router-dom';\n\nvar signedIn = false;\n\nclass Signin extends Component {\n    state = {\n        data: [],\n        email: '',\n        password: '',\n        redirect: null\n    }\n\n    componentDidMount() {\n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    getDataFromDb = () => {\n        fetch('http://localhost:3001/api/getUserData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n    };\n\n    clickSignin = (email, password) => {\n        signedIn = false;\n        const allData = this.state.data;\n        for (let i = 0; i < allData.length; i++) {\n            if (allData[i].email === email && allData[i].password === password) {\n                signedIn = true;\n                this.setState({ redirect: allData[i]._id + \"/home\" });\n                console.log(\"Signed in!\");\n                sessionStorage.clear();\n            }\n        }\n        if (!signedIn) {\n            sessionStorage.clear();\n            sessionStorage.setItem(\"message\", \"Incorrect email or password\");\n        }\n    };\n\n    render() {\n        const { data } = this.state;\n        if (this.state.redirect) {\n            return <Redirect to={this.state.redirect} />\n        }\n        return (\n            <div>\n                <ul>\n                    <li><NavLink to=\"/\">Sign in</NavLink></li>\n                    <li><NavLink to=\"/register\">Register</NavLink></li>\n                </ul>\n                <h2>Sign in!</h2>\n                <p id=\"message\">{sessionStorage.getItem(\"message\")}</p>\n                <form>\n                    <input\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"Email\"\n                        id=\"email\"\n                    />\n                    <input\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Password\"\n                        id=\"password\"\n                    />\n                </form>\n                <button\n                    onClick={() => this.clickSignin(document.getElementById(\"email\").value, document.getElementById(\"password\").value)}\n                >\n                    Sign in\n                    </button>\n\n\n\n\n            </div>\n        );\n    }\n}\n\nexport default Signin;","/home/khushaal/impact_hack/impacthack/src/Register.js",[],"/home/khushaal/impact_hack/impacthack/src/Silly.js",["63","64"],"// /client/App.js\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Silly extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch('http://localhost:3001/api/getData')\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  putDataToDB = (message) => {\n    let currentIds = this.state.data.map((data) => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post('http://localhost:3001/api/putData', {\n      id: idToBeAdded,\n      message: message,\n    });\n  };\n\n  // our delete method that uses our backend api\n  // to remove existing database information\n  deleteFromDB = (idTodelete) => {\n    parseInt(idTodelete);\n    let objIdToDelete = null;\n    this.state.data.forEach((dat) => {\n      if (dat.id == idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete('http://localhost:3001/api/deleteData', {\n      data: {\n        id: objIdToDelete,\n      },\n    });\n  };\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    parseInt(idToUpdate);\n    this.state.data.forEach((dat) => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post('http://localhost:3001/api/updateData', {\n      id: objIdToUpdate,\n      update: { message: updateToApply },\n    });\n  };\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat) => (\n                <li style={{ padding: '10px' }} key={data.message}>\n                  <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                  <span style={{ color: 'gray' }}> data: </span>\n                  {dat.message}\n                </li>\n              ))}\n        </ul>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ message: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Silly;","/home/khushaal/impact_hack/impacthack/src/CurrentMedications.js",["65","66","67","68","69","70"],"import React, { Component } from \"react\";\nimport axios from 'axios';\n\nimport { NavLink } from 'react-router-dom';\n\nasync function genMess() {\n    sessionStorage.setItem(\"message\", \"Successfully signed out\");\n}\n\nlet dataCopy = [];\nlet filtered = [];\nlet userIdString = '';\n\nclass CurrentMedications extends Component {\n    state = {\n        data: [],\n        id: 0,\n        name: '',\n        type: '',\n        prescribedMonth: 0,\n        prescribedDay: 0,\n        prescribedYear: 0,\n        instructions: '',\n        userID: ''\n\n    };\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    componentDidMount() {\n        this.getDataFromDb();\n        \n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    getDataFromDb = () => {\n        fetch('http://localhost:3001/api/getMedicationData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n        \n           \n    }\n    \n\n    //put current data into DB\n    putDataToDB = (name, type, date, instructions) => {\n        let prescribedMonth = date.substring(5, 7);\n        let prescribedDay = date.substring(8);\n        let prescribedYear = date.substring(0, 4);\n        let currentIds = this.state.data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post('http://localhost:3001/api/putMedicationData', {\n            id: idToBeAdded,\n            name: name,\n            type: type,\n            prescribedMonth: prescribedMonth,\n            prescribedDay: prescribedDay,\n            prescribedYear: prescribedYear,\n            instructions: instructions,\n            userID: userIdString\n\n        });\n    };\n\n    //Moves data to past medication page and removes it from this page\n    putPastDataToDB = (name, type, prescribedMonth, prescribedDay, prescribedYear, instructions) => {\n        let currentIds = this.state.data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n        console.log(\"start\");\n        axios.post('http://localhost:3001/api/putPastMedicationData', {\n            id: idToBeAdded,\n            name: name,\n            type: type,\n            prescribedMonth: prescribedMonth,\n            prescribedDay: prescribedDay,\n            prescribedYear: prescribedYear,\n            instructions: instructions,\n            userID: userIdString\n        });\n    };\n\n    // our delete method that uses our backend api\n    // to remove existing database information\n    deleteFromDB = (idTodelete, deleteOrMove) => {\n        \n        let message = '';\n        if(deleteOrMove == 'delete'){\n            message = \"Are you sure you want to delete this medication?\";\n        } else if (deleteOrMove == 'move'){\n            message = \"Are you sure you want to move this medication to past medication?\";\n        }\n        \n        if(window.confirm(message)){\n            let objIdToDelete = null;\n            this.state.data.forEach((dat) => {\n                if (dat._id == idTodelete) {\n                    objIdToDelete = dat._id;\n                }\n            });\n\n            axios.delete('http://localhost:3001/api/deleteMedicationData', {\n                data: {\n                    id: objIdToDelete,\n                },\n            });\n        }\n        window.location.reload();\n    };\n\n    filterData = () => {\n        for(let i = 0; i < this.state.data.length; i++){\n            if(this.state.data[i].userID == userIdString && this.isIncluded(this.state.data[i])){\n                filtered.push(this.state.data[i]);\n            }\n        }\n    };\n    \n    isIncluded = (object) => {\n        for(let i = 0; i < filtered.length; i++){\n            if(filtered[i]._id === object._id){\n                return false;\n            }\n        }\n        return true;\n    };\n    \n\n    render() {\n        const { data } = this.state;\n        userIdString = window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1));\n        this.filterData();\n        return (\n            <div>\n                <h2>Current Medications</h2>\n                <ul>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/home\"}>Home</NavLink></li>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/currentmedications\"}>Current Medications</NavLink></li>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/pastmedications\"}>Past Medications</NavLink></li>\n                    <li><NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/reminders\"}>Reminders</NavLink></li>\n                    <li><NavLink to=\"/silly\">Silly</NavLink></li>\n                    <li><NavLink to=\"/\" onClick={genMess}>Sign Out</NavLink></li>\n                </ul>\n                <form>\n                    <label htmlFor=\"name\">Name:  </label>\n                    <input\n                        type=\"text\"\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        id=\"name\"\n                    /><br/>\n                    <label htmlFor=\"type\">Type:  </label>\n                    <input\n                        type=\"text\"\n                        name=\"type\"\n                        placeholder=\"Type of Medication\"\n                        id=\"type\"\n                    /><br/>\n                    <label htmlFor=\"date\">Starting Date:  </label>\n                    <input\n                        type=\"date\"\n                        name=\"date\"\n                        placeholder=\"Select Start Date: \"\n                        id=\"date\"\n                    /><br/>\n                    <label htmlFor=\"instructions\">Instructions:  </label>\n                    <input\n                        type=\"text\"\n                        name=\"instructions\"\n                        placeholder=\"Instructions for Medication\"\n                        id=\"instructions\"\n                    /><br/>\n                    \n                    <button\n                        type=\"submit\"\n                        onClick={() => this.putDataToDB(\n                            document.getElementById('name').value,\n                            document.getElementById('type').value,\n                            document.getElementById('date').value,\n                            document.getElementById('instructions').value\n                            )}\n                    >\n                        Add New Medication\n                    </button>\n                </form>\n                <ul>\n                    {filtered.length <= 0 ? 'NO DB ENTRIES YET' : filtered.map((dat) => (\n                        <li style={{ padding: '10px' }} key={dat._id}>\n                            <span style={{ color: 'gray' }}> id: </span> {dat._id} <br />\n                            <span style={{ color: 'gray' }}> Medication: </span> {dat.name} <br />\n                            <span style={{ color: 'gray' }}> Type: </span> {dat.type} <br />\n                            <span style={{ color: 'gray' }}> Prescribed Date: </span> {dat.prescribedMonth}/{dat.prescribedDay}/{dat.prescribedYear} <br />\n                            <span style={{ color: 'gray' }}> Instructions: </span> {dat.instructions} <br />\n\n                            <NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/editmedication/\" + dat._id} >\n                                <button>EDIT</button> <br />\n                            </NavLink>\n\n                            <button onClick={() => this.deleteFromDB(dat._id, 'delete')}>\n                                DELETE\n                                </button> <br />\n\n                            <button onClick={() => {\n                                this.putPastDataToDB(dat.name, dat.type, dat.prescribedMonth, dat.prescribedDay, dat.prescribedYear, dat.instructions);\n                                this.deleteFromDB(dat._id, 'move');\n                            }}>\n                                MOVE TO PAST MEDICATION\n                                </button> <br />\n                        </li>\n                    ))}\n                </ul>\n            </div>\n\n        );\n    }\n}\n\nexport default CurrentMedications;","/home/khushaal/impact_hack/impacthack/src/EditMedication.js",["71","72","73","74"],"import React, { Component } from \"react\";\nimport axios from 'axios';\nimport { NavLink, Redirect } from 'react-router-dom';\n\nasync function genMess() {\n    sessionStorage.setItem(\"message\", \"Successfully signed out\");\n}\n\n\nlet filtered = [];\nlet userIdString = '';\nlet medicationId = '';\nlet medName;\nlet medType;\nlet medMonth;\nlet medDay;\nlet medYear;\nlet medInstructions;\nlet medId;\n\nclass EditMedications extends Component {\n    state = {\n        data: [],\n        id: 0,\n        name: '',\n        type: '',\n        prescribedMonth: 0,\n        prescribedDay: 0,\n        prescribedYear: 0,\n        instructions: '',\n        userID: '',\n        redirect: null\n\n    };\n\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    componentDidMount() {\n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    getDataFromDb = () => {\n        fetch('http://localhost:3001/api/getMedicationData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n    };\n\n    updateDB(idToUpdate, updatedName, updatedType, updatedDate, updatedInstructions) {\n        let updatedMonth = updatedDate.substring(5, 7);\n        let updatedDay = updatedDate.substring(8);\n        let updatedYear = updatedDate.substring(0, 4);\n\n        if (updatedName === '') {\n            updatedName = medName;\n        }\n        if (updatedType === '') {\n            updatedType = medType;\n        }\n        if (updatedMonth === '') {\n            updatedMonth = medMonth;\n        }\n        if (updatedDay === '') {\n            updatedDay = medDay;\n        }\n        if (updatedYear === '') {\n            updatedYear = medYear;\n        }\n        if (updatedInstructions === '') {\n            updatedInstructions = medInstructions;\n        }\n\n        axios.post('http://localhost:3001/api/updateMedicationData', {\n            id: idToUpdate,\n            update: {\n                name: updatedName,\n                type: updatedType,\n                prescribedMonth: updatedMonth,\n                prescribedDay: updatedDay,\n                prescribedYear: updatedYear,\n                instructions: updatedInstructions\n\n            },\n        });\n        alert(\"Medication has been updated\")\n    };\n\n    filterData = () => {\n        for (let i = 0; i < this.state.data.length; i++) {\n            if (this.state.data[i].userID === userIdString && this.state.data[i]._id === medicationId && this.isIncluded(this.state.data[i])) {\n                filtered.push(this.state.data[i]);\n            }\n        }\n        filtered.map((dat) => (\n            medName = dat.name,\n            medType = dat.type,\n            medMonth = dat.prescribedMonth,\n            medDay = dat.prescribedDay,\n            medYear = dat.prescribedYear,\n            medInstructions = dat.instructions,\n            medId = dat._id\n        ))\n    }\n\n    isIncluded = (object) => {\n        for (let i = 0; i < filtered.length; i++) {\n            if (filtered[i]._id === object._id) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    redirectPage = () => {\n        this.setState({ redirect: \"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/currentmedications\" })\n    }\n\n\n    render() {\n        const { data } = this.state;\n        if (this.state.redirect) {\n            return <Redirect to={this.state.redirect} />\n        }\n        userIdString = window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1));\n        medicationId = window.location.href.substring(window.location.href.indexOf(\"editmedication\") + 15);\n        this.filterData();\n        filtered.map((dat) => (\n            medName = dat.name,\n            medType = dat.type,\n            medMonth = dat.prescribedMonth,\n            medDay = dat.prescribedDay,\n            medYear = dat.prescribedYear,\n            medInstructions = dat.instructions\n        ))\n        return (\n            <div>\n                <h2>Edit Medication</h2>\n                <NavLink to={\"/\" + window.location.href.substring(window.location.href.indexOf(\"#\") + 1 + 1, window.location.href.indexOf(\"/\", window.location.href.indexOf(\"#\") + 1 + 1)) + \"/currentmedications\"}>Go Back to Current Medications</NavLink>\n\n                <form>\n                    <label htmlFor=\"name\">Name:  </label>\n                    <input\n                        type=\"text\"\n                        name=\"name\"\n                        placeholder={medName}\n                        id=\"name\"\n                    /><br />\n                    <label htmlFor=\"type\">Type:  </label>\n                    <input\n                        type=\"text\"\n                        name=\"type\"\n                        placeholder={medType}\n                        id=\"type\"\n                    /><br />\n                    <label htmlFor=\"date\">Starting Date:  </label>\n                    <input\n                        type=\"date\"\n                        name=\"date\"\n                        placeholder= \"asdf\"\n                        id=\"date\"\n                    /><br/>\n                    <label htmlFor=\"instructions\">Instructions:  </label>\n                    <input\n                        type=\"text\"\n                        name=\"instructions\"\n                        placeholder={medInstructions}\n                        id=\"instructions\"\n                    /><br />\n                    <button\n                        type=\"submit\"\n                        onClick={() => this.updateDB(medId,\n                            document.getElementById('name').value,\n                            document.getElementById('type').value,\n                            document.getElementById('date').value,\n                            document.getElementById('instructions').value)\n                        }\n                    >\n                        Save Changes\n                    </button>\n                </form>\n            </div>\n        );\n\n\n    }\n}\n\nexport default EditMedications;",["75","76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":77,"column":25,"nodeType":"83","messageId":"84","endLine":77,"endColumn":27},{"ruleId":"81","severity":1,"message":"82","line":79,"column":33,"nodeType":"83","messageId":"84","endLine":79,"endColumn":35},{"ruleId":"81","severity":1,"message":"82","line":85,"column":29,"nodeType":"83","messageId":"84","endLine":85,"endColumn":31},{"ruleId":"85","severity":1,"message":"86","line":117,"column":17,"nodeType":"87","messageId":"88","endLine":117,"endColumn":21},{"ruleId":"81","severity":1,"message":"82","line":59,"column":42,"nodeType":"83","messageId":"84","endLine":59,"endColumn":44},{"ruleId":"85","severity":1,"message":"86","line":75,"column":17,"nodeType":"87","messageId":"88","endLine":75,"endColumn":21},{"ruleId":"85","severity":1,"message":"86","line":53,"column":17,"nodeType":"87","messageId":"88","endLine":53,"endColumn":21},{"ruleId":"81","severity":1,"message":"82","line":71,"column":18,"nodeType":"83","messageId":"84","endLine":71,"endColumn":20},{"ruleId":"81","severity":1,"message":"82","line":89,"column":18,"nodeType":"83","messageId":"84","endLine":89,"endColumn":20},{"ruleId":"85","severity":1,"message":"89","line":10,"column":5,"nodeType":"87","messageId":"88","endLine":10,"endColumn":13},{"ruleId":"81","severity":1,"message":"82","line":107,"column":25,"nodeType":"83","messageId":"84","endLine":107,"endColumn":27},{"ruleId":"81","severity":1,"message":"82","line":109,"column":33,"nodeType":"83","messageId":"84","endLine":109,"endColumn":35},{"ruleId":"81","severity":1,"message":"82","line":116,"column":29,"nodeType":"83","messageId":"84","endLine":116,"endColumn":31},{"ruleId":"81","severity":1,"message":"82","line":132,"column":42,"nodeType":"83","messageId":"84","endLine":132,"endColumn":44},{"ruleId":"85","severity":1,"message":"86","line":149,"column":17,"nodeType":"87","messageId":"88","endLine":149,"endColumn":21},{"ruleId":"85","severity":1,"message":"90","line":5,"column":16,"nodeType":"87","messageId":"88","endLine":5,"endColumn":23},{"ruleId":"91","severity":1,"message":"92","line":109,"column":31,"nodeType":"93","messageId":"94","endLine":109,"endColumn":32},{"ruleId":"85","severity":1,"message":"86","line":134,"column":17,"nodeType":"87","messageId":"88","endLine":134,"endColumn":21},{"ruleId":"91","severity":1,"message":"92","line":142,"column":31,"nodeType":"93","messageId":"94","endLine":142,"endColumn":32},{"ruleId":"77","replacedBy":"95"},{"ruleId":"79","replacedBy":"96"},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'dataCopy' is assigned a value but never used.","'genMess' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",["97"],["98"],"no-global-assign","no-unsafe-negation"]